{"version":3,"file":"hubspotDeals.js","sourceRoot":"","sources":["../../app/apis/hubspotDeals.ts"],"names":[],"mappings":"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","sourcesContent":["import ____moose____typia from \"typia\";\nimport { ConsumptionApi } from \"@514labs/moose-lib\";\ninterface HubSpotDealsAnalyticsQueryParams {\n    groupBy?: \"stage\" | \"pipeline\" | \"month\";\n    limit?: number;\n    includeArchived?: boolean;\n    currency?: string;\n}\ninterface HubSpotDealAnalyticsData {\n    groupField: string;\n    groupLabel: string;\n    dealCount: number;\n    totalAmount: number;\n    avgAmount: number;\n    wonAmount: number;\n    wonCount: number;\n    winRate: number;\n    avgDaysToClose?: number;\n}\ninterface HubSpotDealLookupQueryParams {\n    dealId?: string;\n    dealName?: string;\n    ownerId?: string;\n    stage?: string;\n    limit?: number;\n}\ninterface HubSpotDealData {\n    id: string;\n    dealName: string;\n    amount: number;\n    currency: string;\n    stage: string;\n    stageLabel: string;\n    pipeline: string;\n    pipelineLabel: string;\n    closeDate?: string;\n    createdAt: string;\n    ownerId?: string;\n    isWon: boolean;\n    isClosed: boolean;\n    contactCount: number;\n    associatedContacts: string[];\n    associatedCompanies: string[];\n}\nexport const HubSpotDealsAnalyticsApi = new ConsumptionApi<HubSpotDealsAnalyticsQueryParams, HubSpotDealAnalyticsData[]>(\"hubspot-deals-analytics\", (params, utils) => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<HubSpotDealsAnalyticsQueryParams>();\n    const searchParams = new URLSearchParams(params as any);\n    const processedParams = assertGuard(searchParams);\n    return (async ({ groupBy = \"stage\", limit = 10, includeArchived = false, currency }, { client, sql }) => {\n        let query;\n        if (groupBy === \"pipeline\") {\n            if (currency) {\n                query = sql `\n        SELECT \n          pipeline as groupField,\n          pipelineLabel as groupLabel,\n          count(*) as dealCount,\n          sum(amount) as totalAmount,\n          avg(amount) as avgAmount,\n          sum(case when isWon then amount else 0 end) as wonAmount,\n          count(case when isWon then 1 end) as wonCount,\n          round(count(case when isWon then 1 end) * 100.0 / count(*), 2) as winRate,\n          avg(daysToClose) as avgDaysToClose\n        FROM HubSpotDeal FINAL\n        WHERE isArchived = ${includeArchived} AND currency = ${currency}\n        GROUP BY pipeline, pipelineLabel\n        ORDER BY totalAmount DESC\n        LIMIT ${limit}\n      `;\n            }\n            else {\n                query = sql `\n        SELECT \n          pipeline as groupField,\n          pipelineLabel as groupLabel,\n          count(*) as dealCount,\n          sum(amount) as totalAmount,\n          avg(amount) as avgAmount,\n          sum(case when isWon then amount else 0 end) as wonAmount,\n          count(case when isWon then 1 end) as wonCount,\n          round(count(case when isWon then 1 end) * 100.0 / count(*), 2) as winRate,\n          avg(daysToClose) as avgDaysToClose\n        FROM HubSpotDeal FINAL\n        WHERE isArchived = ${includeArchived}\n        GROUP BY pipeline, pipelineLabel\n        ORDER BY totalAmount DESC\n        LIMIT ${limit}\n      `;\n            }\n        }\n        else if (groupBy === \"month\") {\n            if (currency) {\n                query = sql `\n        SELECT \n          toYYYYMM(createdAt) as groupField,\n          formatDateTime(createdAt, '%Y-%m') as groupLabel,\n          count(*) as dealCount,\n          sum(amount) as totalAmount,\n          avg(amount) as avgAmount,\n          sum(case when isWon then amount else 0 end) as wonAmount,\n          count(case when isWon then 1 end) as wonCount,\n          round(count(case when isWon then 1 end) * 100.0 / count(*), 2) as winRate,\n          avg(daysToClose) as avgDaysToClose\n        FROM HubSpotDeal FINAL\n        WHERE isArchived = ${includeArchived} AND currency = ${currency}\n        GROUP BY toYYYYMM(createdAt), formatDateTime(createdAt, '%Y-%m')\n        ORDER BY groupField DESC\n        LIMIT ${limit}\n      `;\n            }\n            else {\n                query = sql `\n        SELECT \n          toYYYYMM(createdAt) as groupField,\n          formatDateTime(createdAt, '%Y-%m') as groupLabel,\n          count(*) as dealCount,\n          sum(amount) as totalAmount,\n          avg(amount) as avgAmount,\n          sum(case when isWon then amount else 0 end) as wonAmount,\n          count(case when isWon then 1 end) as wonCount,\n          round(count(case when isWon then 1 end) * 100.0 / count(*), 2) as winRate,\n          avg(daysToClose) as avgDaysToClose\n        FROM HubSpotDeal FINAL\n        WHERE isArchived = ${includeArchived}\n        GROUP BY toYYYYMM(createdAt), formatDateTime(createdAt, '%Y-%m')\n        ORDER BY groupField DESC\n        LIMIT ${limit}\n      `;\n            }\n        }\n        else {\n            if (currency) {\n                query = sql `\n        SELECT \n          stage as groupField,\n          stageLabel as groupLabel,\n          count(*) as dealCount,\n          sum(amount) as totalAmount,\n          avg(amount) as avgAmount,\n          sum(case when isWon then amount else 0 end) as wonAmount,\n          count(case when isWon then 1 end) as wonCount,\n          round(count(case when isWon then 1 end) * 100.0 / count(*), 2) as winRate,\n          avg(daysToClose) as avgDaysToClose\n        FROM HubSpotDeal FINAL\n        WHERE isArchived = ${includeArchived} AND currency = ${currency}\n        GROUP BY stage, stageLabel\n        ORDER BY totalAmount DESC\n        LIMIT ${limit}\n      `;\n            }\n            else {\n                query = sql `\n        SELECT \n          stage as groupField,\n          stageLabel as groupLabel,\n          count(*) as dealCount,\n          sum(amount) as totalAmount,\n          avg(amount) as avgAmount,\n          sum(case when isWon then amount else 0 end) as wonAmount,\n          count(case when isWon then 1 end) as wonCount,\n          round(count(case when isWon then 1 end) * 100.0 / count(*), 2) as winRate,\n          avg(daysToClose) as avgDaysToClose\n        FROM HubSpotDeal FINAL\n        WHERE isArchived = ${includeArchived}\n        GROUP BY stage, stageLabel\n        ORDER BY totalAmount DESC\n        LIMIT ${limit}\n      `;\n            }\n        }\n        const data = await client.query.execute<HubSpotDealAnalyticsData>(query);\n        const result: HubSpotDealAnalyticsData[] = await data.json();\n        return result;\n    })(processedParams, utils);\n}, {}, ____moose____typia.json.schemas<[\n    HubSpotDealsAnalyticsQueryParams\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"groupBy\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"limit\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"includeArchived\\\",\\\"data_type\\\":\\\"Boolean\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"currency\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, ____moose____typia.json.schemas<[\n    HubSpotDealAnalyticsData[]\n]>());\nexport const HubSpotDealLookupApi = new ConsumptionApi<HubSpotDealLookupQueryParams, HubSpotDealData[]>(\"hubspot-deal-lookup\", (params, utils) => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<HubSpotDealLookupQueryParams>();\n    const searchParams = new URLSearchParams(params as any);\n    const processedParams = assertGuard(searchParams);\n    return (async ({ dealId, dealName, ownerId, stage, limit = 20 }, { client, sql }) => {\n        let query;\n        if (dealId) {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      WHERE id = ${dealId}\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        else if (dealName && ownerId && stage) {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      WHERE dealName ILIKE ${`%${dealName}%`} AND ownerId = ${ownerId} AND stage = ${stage}\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        else if (dealName && ownerId) {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      WHERE dealName ILIKE ${`%${dealName}%`} AND ownerId = ${ownerId}\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        else if (dealName && stage) {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      WHERE dealName ILIKE ${`%${dealName}%`} AND stage = ${stage}\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        else if (dealName) {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      WHERE dealName ILIKE ${`%${dealName}%`}\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        else if (ownerId && stage) {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      WHERE ownerId = ${ownerId} AND stage = ${stage}\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        else if (ownerId) {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      WHERE ownerId = ${ownerId}\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        else if (stage) {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      WHERE stage = ${stage}\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        else {\n            query = sql `\n      SELECT \n        id, dealName, amount, currency, stage, stageLabel, pipeline, pipelineLabel,\n        closeDate, createdAt, ownerId, isWon, isClosed, contactCount,\n        associatedContacts, associatedCompanies\n      FROM HubSpotDeal FINAL\n      ORDER BY lastModifiedAt DESC\n      LIMIT ${limit}\n    `;\n        }\n        const data = await client.query.execute<HubSpotDealData>(query);\n        const result: HubSpotDealData[] = await data.json();\n        return result;\n    })(processedParams, utils);\n}, {}, ____moose____typia.json.schemas<[\n    HubSpotDealLookupQueryParams\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"dealId\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"dealName\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"ownerId\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"stage\\\",\\\"data_type\\\":\\\"String\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"limit\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, ____moose____typia.json.schemas<[\n    HubSpotDealData[]\n]>());\ninterface HubSpotPipelinePerformanceData {\n    pipeline: string;\n    pipelineLabel: string;\n    totalDeals: number;\n    totalValue: number;\n    wonDeals: number;\n    wonValue: number;\n    lostDeals: number;\n    avgDaysToClose: number;\n    conversionRate: number;\n}\nexport const HubSpotDealPipelineApi = new ConsumptionApi<{\n    daysBack?: number;\n    limit?: number;\n}, HubSpotPipelinePerformanceData[]>(\"hubspot-deal-pipeline\", (params, utils) => {\n    const assertGuard = ____moose____typia.http.createAssertQuery<{\n        daysBack?: number;\n        limit?: number;\n    }>();\n    const searchParams = new URLSearchParams(params as any);\n    const processedParams = assertGuard(searchParams);\n    return (async ({ daysBack = 30, limit = 10 }, { client, sql }): Promise<HubSpotPipelinePerformanceData[]> => {\n        const query = sql `\n    SELECT \n      pipeline,\n      pipelineLabel,\n      count(*) as totalDeals,\n      sum(amount) as totalValue,\n      sum(case when isWon then 1 else 0 end) as wonDeals,\n      sum(case when isWon then amount else 0 end) as wonValue,\n      sum(case when isClosed and not isWon then 1 else 0 end) as lostDeals,\n      avg(case when isClosed then daysToClose end) as avgDaysToClose,\n      round(sum(case when isWon then 1 else 0 end) * 100.0 / count(*), 2) as conversionRate\n    FROM HubSpotDeal FINAL\n    WHERE createdAt >= subtractDays(now(), ${daysBack})\n    GROUP BY pipeline, pipelineLabel\n    ORDER BY totalValue DESC\n    LIMIT ${limit}\n  `;\n        const data = await client.query.execute<HubSpotPipelinePerformanceData>(query);\n        const result: HubSpotPipelinePerformanceData[] = await data.json();\n        return result;\n    })(processedParams, utils);\n}, {}, ____moose____typia.json.schemas<[\n    {\n        daysBack?: number;\n        limit?: number;\n    }\n]>(), JSON.parse(\"[{\\\"name\\\":\\\"daysBack\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]},{\\\"name\\\":\\\"limit\\\",\\\"data_type\\\":\\\"Float\\\",\\\"primary_key\\\":false,\\\"required\\\":false,\\\"unique\\\":false,\\\"default\\\":null,\\\"annotations\\\":[]}]\") as any, ____moose____typia.json.schemas<[\n    HubSpotPipelinePerformanceData[]\n]>());\n"]}