{"version":3,"file":"hubspotWorkflow.js","sourceRoot":"","sources":["../app/hubspotWorkflow.ts"],"names":[],"mappings":"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","sourcesContent":["import { Task, Workflow } from \"@514labs/moose-lib\";\nimport { createHubSpotConnector, type HubSpotConnector } from \"./hubspot/src\";\ninterface HubSpotDealRawIngestion {\n    id: string;\n    properties: Record<string, string>;\n    createdAt: string;\n    updatedAt: string;\n    archived: boolean;\n    associations: {\n        contacts: string[];\n        companies: string[];\n    };\n}\nasync function syncHubSpotDeals(): Promise<void> {\n    const token = process.env.HUBSPOT_TOKEN;\n    if (!token)\n        throw new Error(\"HUBSPOT_TOKEN environment variable is required\");\n    console.log(\"üöÄ Starting HubSpot deals sync...\");\n    const connector = createHubSpotConnector();\n    connector.initialize({\n        auth: { type: \"bearer\", bearer: { token } },\n        rateLimit: { requestsPerSecond: 10, burstCapacity: 10 },\n    });\n    await connector.connect();\n    const dealProperties = [\n        \"dealname\", \"amount\", \"dealstage\", \"pipeline\", \"dealtype\",\n        \"closedate\", \"createdate\", \"hs_lastmodifieddate\", \"hubspot_owner_id\",\n        \"deal_currency_code\", \"dealstage_label\", \"pipeline_label\",\n        \"hs_deal_stage_probability\", \"hs_forecast_amount\", \"hs_projected_amount\",\n        \"num_associated_contacts\", \"num_contacted_notes\", \"days_to_close\"\n    ];\n    let dealCount = 0, successCount = 0, errorCount = 0;\n    for await (const deal of connector.streamDeals({ properties: dealProperties, pageSize: 100 })) {\n        dealCount++;\n        try {\n            const cleanProperties: Record<string, string> = {};\n            for (const [key, value] of Object.entries(deal.properties || {})) {\n                if (value !== null && value !== undefined && value !== \"\")\n                    cleanProperties[key] = String(value);\n            }\n            const dealData: HubSpotDealRawIngestion = {\n                id: deal.id,\n                properties: cleanProperties,\n                createdAt: deal.createdAt,\n                updatedAt: deal.updatedAt,\n                archived: deal.archived || false,\n                associations: { contacts: [], companies: [] },\n            };\n            const response = await fetch(\"http://localhost:4000/ingest/HubSpotDealRaw\", {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(dealData),\n            });\n            if (!response.ok)\n                throw new Error(`Moose ingestion error ${response.status}: ${await response.text()}`);\n            successCount++;\n            if (dealCount % 50 === 0)\n                console.log(`üìä Processed ${dealCount} total (${successCount} ok, ${errorCount} errs)`);\n        }\n        catch (err) {\n            errorCount++;\n            console.error(`‚ùå Error ingesting deal ${dealCount}:`, err);\n        }\n    }\n    await connector.disconnect();\n    console.log(\"‚úÖ HubSpot sync completed!\", { dealCount, successCount, errorCount });\n}\nexport const syncHubSpotDealsTask = new Task<null, void>(\"syncHubSpotDeals\", {\n    run: async () => {\n        console.log(\"üîÑ Starting HubSpot deals sync workflow with connector...\");\n        const startTime = Date.now();\n        await syncHubSpotDeals();\n        const duration = Math.round((Date.now() - startTime) / 1000);\n        console.log(`‚úÖ HubSpot deals sync completed successfully in ${duration}s`);\n    },\n    retries: 3,\n    timeout: \"1m\",\n});\nexport const hubspotDataSyncWorkflow = new Workflow(\"hubspotDataSync\", {\n    startingTask: syncHubSpotDealsTask,\n    retries: 2,\n    timeout: \"1m\",\n    // schedule: \"@every 30s\",\n});\n"]}