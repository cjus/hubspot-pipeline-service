{"version":3,"file":"token-bucket.js","sourceRoot":"","sources":["../../../../app/hubspot/src/rate-limit/token-bucket.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;IAKI,4BAAY,MAGX;QACG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC7C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;QACrD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACjC,CAAC;IACO,yCAAY,GAApB;QACI,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAM,UAAU,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;QAClD,IAAI,UAAU,IAAI,CAAC;YACf,OAAO;QACX,IAAM,GAAG,GAAG,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;QACzD,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;IAC1B,CAAC;IACD,uCAAU,GAAV;QACI,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;IAC5B,CAAC;IACK,wCAAW,GAAjB;;;;;6BACW,IAAI;wBACP,IAAI,CAAC,YAAY,EAAE,CAAC;wBACpB,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;4BACnB,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;4BACjB,sBAAO;wBACX,CAAC;wBACD,qBAAM,IAAI,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,EAAjB,CAAiB,CAAC,EAAA;;wBAA3C,SAA2C,CAAC;;;;;;KAEnD;IACL,yBAAC;AAAD,CAAC,AArCD,IAqCC;AArCY,gDAAkB","sourcesContent":["export class TokenBucketLimiter {\n    private capacity: number;\n    private tokens: number;\n    private refillPerSec: number;\n    private lastRefill: number;\n    constructor(params: {\n        capacity: number;\n        refillPerSec: number;\n    }) {\n        this.capacity = Math.max(1, params.capacity);\n        this.tokens = this.capacity;\n        this.refillPerSec = Math.max(1, params.refillPerSec);\n        this.lastRefill = Date.now();\n    }\n    private refillTokens() {\n        const now = Date.now();\n        const elapsedSec = (now - this.lastRefill) / 1000;\n        if (elapsedSec <= 0)\n            return;\n        const add = elapsedSec * this.refillPerSec;\n        this.tokens = Math.min(this.capacity, this.tokens + add);\n        this.lastRefill = now;\n    }\n    canProceed(): boolean {\n        this.refillTokens();\n        return this.tokens >= 1;\n    }\n    async waitForSlot(): Promise<void> {\n        while (true) {\n            this.refillTokens();\n            if (this.tokens >= 1) {\n                this.tokens -= 1;\n                return;\n            }\n            await new Promise((r) => setTimeout(r, 50));\n        }\n    }\n}\n"]}