{"version":3,"file":"engagements.js","sourceRoot":"","sources":["../../../../app/hubspot/src/domains/engagements.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Engagements domain (activities)\n *\n * Why the `objectType` union?\n * - In HubSpot CRM v3, activity records are modeled as separate CRM objects that\n *   share the same REST shape and pagination semantics but live under different\n *   object types: `notes`, `calls`, `emails`, `meetings`, and `tasks`.\n * - The endpoints are `/crm/v3/objects/{objectType}` and `/crm/v3/objects/{objectType}/{id}`.\n * - Constraining `objectType` to this union catches typos at compile time and\n *   documents the set of supported engagement types.\n * - https://developers.hubspot.com/docs/guides/api/crm/engagements/engagement-details\n *\n * Contrast with fixed domains (contacts/companies/deals/tickets): those bind a\n * constant path (e.g., `/crm/v3/objects/contacts`). Engagements are parameterized\n * by `objectType`, but the CRUD/pagination behavior remains identical.\n */\nimport type { SendFn } from \"../core/paginate\";\nimport { paginateCursor } from \"../core/paginate\";\nimport type { Engagement, EngagementsResponse, EngagementResponse } from \"../models/engagements\";\nexport function buildEngagementsDomain(send: SendFn) {\n    const api = {\n        listEngagements: (params: {\n            objectType: \"notes\" | \"calls\" | \"emails\" | \"meetings\" | \"tasks\";\n            properties?: string[];\n            limit?: number;\n            after?: string;\n        }) => {\n            const { objectType } = params;\n            const query: Record<string, any> = {};\n            if (params?.properties?.length)\n                query.properties = params.properties.join(\",\");\n            if (params?.limit)\n                query.limit = params.limit;\n            if (params?.after)\n                query.after = params.after;\n            return send<EngagementsResponse>({ method: \"GET\", path: `/crm/v3/objects/${objectType}` as const, query });\n        },\n        getEngagement: (params: {\n            objectType: \"notes\" | \"calls\" | \"emails\" | \"meetings\" | \"tasks\";\n            id: string;\n            properties?: string[];\n        }) => {\n            const { objectType, id } = params;\n            const query: Record<string, any> = {};\n            if (params?.properties?.length)\n                query.properties = params.properties.join(\",\");\n            return send<EngagementResponse>({ method: \"GET\", path: `/crm/v3/objects/${objectType}/${id}` as const, query });\n        },\n        streamEngagements: async function* (params: {\n            objectType: \"notes\" | \"calls\" | \"emails\" | \"meetings\" | \"tasks\";\n            properties?: string[];\n            pageSize?: number;\n        }) {\n            const { objectType } = params;\n            const query: Record<string, any> = {};\n            if (params?.properties?.length)\n                query.properties = params.properties.join(\",\");\n            for await (const items of paginateCursor<Engagement>({ send, path: `/crm/v3/objects/${objectType}` as const, query, pageSize: params?.pageSize })) {\n                for (const item of items)\n                    yield item;\n            }\n        },\n        getEngagements: async (params: {\n            objectType: \"notes\" | \"calls\" | \"emails\" | \"meetings\" | \"tasks\";\n            properties?: string[];\n            pageSize?: number;\n            maxItems?: number;\n        }) => {\n            const results: Engagement[] = [];\n            for await (const item of api.streamEngagements(params)) {\n                results.push(item);\n                if (params?.maxItems && results.length >= params.maxItems)\n                    break;\n            }\n            return results;\n        },\n    };\n    return api;\n}\n"]}