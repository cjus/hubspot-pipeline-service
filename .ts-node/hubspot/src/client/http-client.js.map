{"version":3,"file":"http-client.js","sourceRoot":"","sources":["../../../../app/hubspot/src/client/http-client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ConnectorConfig } from \"../types/config\";\nimport type { HttpResponseEnvelope } from \"../types/envelopes\";\nimport { ConnectorError } from \"../types/errors\";\nimport { applyHookPipeline } from \"./middleware/hook-middleware\";\nimport http from \"node:http\";\nimport https from \"node:https\";\nimport { URL } from \"node:url\";\nexport interface HttpRequestOptions {\n    method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n    path: string;\n    query?: Record<string, string | number | boolean | undefined>;\n    headers?: Record<string, string>;\n    body?: unknown;\n    timeoutMs?: number;\n    operation?: string;\n}\nexport interface HttpClientOptions {\n    applyAuth?: (req: {\n        headers: Record<string, string>;\n    }) => void;\n}\nexport class HttpClient {\n    constructor(private config: ConnectorConfig, private options: HttpClientOptions = {}) { }\n    private buildUrl(path: string, query?: Record<string, any>) {\n        const url = new URL(path.startsWith(\"http\") ? path : `${this.config.baseUrl}${path}`);\n        const qp = { ...(this.config.defaultQueryParams ?? {}), ...(query ?? {}) };\n        for (const [k, v] of Object.entries(qp)) {\n            if (v === undefined || v === null)\n                continue;\n            url.searchParams.set(k, String(v));\n        }\n        return url.toString();\n    }\n    private async sleep(ms: number) {\n        return new Promise((r) => setTimeout(r, ms));\n    }\n    private calculateDelay(attempt: number): number {\n        const initial = this.config.retry?.initialDelayMs ?? 1000;\n        const max = this.config.retry?.maxDelayMs ?? 30000;\n        const mult = this.config.retry?.backoffMultiplier ?? 2;\n        const base = Math.min(initial * Math.pow(mult, attempt - 1), max);\n        const jitter = base * (0.5 + Math.random() * 0.5);\n        return Math.floor(jitter);\n    }\n    private shouldRetry(status: number, attempt: number): boolean {\n        const retryables = this.config.retry?.retryableStatusCodes ?? [408, 425, 429, 500, 502, 503, 504];\n        const withinAttempts = attempt < (this.config.retry?.maxAttempts ?? 3);\n        return withinAttempts && retryables.includes(status);\n    }\n    async request<T = any>(opts: HttpRequestOptions): Promise<HttpResponseEnvelope<T>> {\n        const start = Date.now();\n        const path = opts.path.startsWith(\"/\") ? opts.path : `/${opts.path}`;\n        const url = this.buildUrl(path, opts.query);\n        const headers: Record<string, string> = {\n            ...(this.config.defaultHeaders ?? {}),\n            ...(opts.headers ?? {}),\n        };\n        // Apply connector-provided auth (provider-specific)\n        if (this.options.applyAuth) {\n            this.options.applyAuth({ headers });\n        }\n        const req: {\n            method: HttpRequestOptions[\"method\"];\n            url: string;\n            headers: Record<string, string>;\n            body?: unknown;\n        } = {\n            method: opts.method,\n            url,\n            headers,\n            body: opts.body,\n        };\n        let aborted = false;\n        let abortReason: string | undefined;\n        const hooks = applyHookPipeline(this.config.hooks ?? {}, opts.operation ?? opts.method, (type) => ({\n            type,\n            operation: opts.operation,\n            request: req,\n            abort: (reason?: string) => {\n                aborted = true;\n                abortReason = reason ?? \"Aborted by hook\";\n            },\n        }));\n        await hooks.beforeRequest();\n        if (aborted) {\n            throw new ConnectorError({ message: abortReason || \"Aborted\", code: \"CANCELLED\", source: \"userHook\" });\n        }\n        const timeoutMs = opts.timeoutMs ?? this.config.timeoutMs ?? 30000;\n        let attempt = 0;\n        let lastError: unknown;\n        const retryBudget = this.config.retry?.retryBudgetMs ?? 60000;\n        const budgetDeadline = start + retryBudget;\n        while (true) {\n            attempt += 1;\n            try {\n                const { status, headers: resHeaders, text } = await this.nodeHttpRequest(req.url, {\n                    method: req.method,\n                    headers: req.headers,\n                    body: req.body ? (typeof req.body === \"string\" ? req.body : JSON.stringify(req.body)) : undefined,\n                    timeoutMs,\n                });\n                const hdrs: Record<string, string> = {};\n                for (const [k, v] of Object.entries(resHeaders)) {\n                    const value = Array.isArray(v) ? v.join(\", \") : (v ?? \"\");\n                    hdrs[k.toLowerCase()] = value as string;\n                }\n                let data: any = undefined;\n                try {\n                    data = text ? JSON.parse(text) : undefined;\n                }\n                catch (e) {\n                    throw new ConnectorError({ message: \"Failed to parse JSON\", code: \"PARSING_ERROR\", source: \"deserialize\" });\n                }\n                const retryAfter = Number(hdrs[\"retry-after\"]);\n                const rateLimit = {\n                    limit: Number(hdrs[\"x-hubspot-ratelimit-daily\"] ?? hdrs[\"x-hubspot-ratelimit-secondly\"]),\n                    remaining: Number(hdrs[\"x-hubspot-ratelimit-daily-remaining\"] ?? hdrs[\"x-hubspot-ratelimit-secondly-remaining\"]),\n                    reset: Number(hdrs[\"x-hubspot-ratelimit-reset\"]),\n                    retryAfterSeconds: Number.isFinite(retryAfter) ? retryAfter : undefined,\n                };\n                const envelope: HttpResponseEnvelope<T> = {\n                    data: data as T,\n                    status,\n                    headers: hdrs,\n                    meta: {\n                        timestamp: new Date().toISOString(),\n                        durationMs: Date.now() - start,\n                        requestId: hdrs[\"x-request-id\"] ?? hdrs[\"x-trace\"],\n                        retryCount: attempt - 1,\n                        rateLimit,\n                    },\n                };\n                if (!(status >= 200 && status < 300) && this.shouldRetry(status, attempt)) {\n                    await hooks.onRetry(attempt);\n                    const delayMs = this.config.retry?.respectRetryAfter && rateLimit.retryAfterSeconds\n                        ? rateLimit.retryAfterSeconds * 1000\n                        : this.calculateDelay(attempt);\n                    if (Date.now() + delayMs > budgetDeadline) {\n                        throw new ConnectorError({ message: \"Retry budget exceeded\", code: \"TIMEOUT\" });\n                    }\n                    await this.sleep(delayMs);\n                    continue;\n                }\n                await hooks.afterResponse(envelope);\n                return envelope;\n            }\n            catch (err: any) {\n                lastError = err;\n                await hooks.onError(err);\n                if (err?.code === \"ETIMEDOUT\" || err?.message === \"Request timed out\") {\n                    throw new ConnectorError({ message: \"Request timed out\", code: \"TIMEOUT\", source: \"transport\", retryable: true });\n                }\n                if (err instanceof ConnectorError) {\n                    if (this.shouldRetry(err.statusCode ?? 0, attempt) && Date.now() < budgetDeadline) {\n                        await hooks.onRetry(attempt);\n                        await this.sleep(this.calculateDelay(attempt));\n                        continue;\n                    }\n                    throw err;\n                }\n                // Generic transport error\n                if (attempt < (this.config.retry?.maxAttempts ?? 3) && Date.now() < budgetDeadline) {\n                    await hooks.onRetry(attempt);\n                    await this.sleep(this.calculateDelay(attempt));\n                    continue;\n                }\n                throw new ConnectorError({ message: String(err?.message ?? err), code: \"NETWORK_ERROR\", source: \"transport\", retryable: true });\n            }\n        }\n    }\n    private nodeHttpRequest(urlStr: string, opts: {\n        method: string;\n        headers?: Record<string, string>;\n        body?: string;\n        timeoutMs: number;\n    }): Promise<{\n        status: number;\n        headers: http.IncomingHttpHeaders;\n        text: string;\n    }> {\n        return new Promise((resolve, reject) => {\n            const u = new URL(urlStr);\n            const isHttps = u.protocol === \"https:\";\n            const lib = isHttps ? https : http;\n            const req = lib.request({\n                protocol: u.protocol,\n                hostname: u.hostname,\n                port: u.port || (isHttps ? 443 : 80),\n                path: `${u.pathname}${u.search}`,\n                method: opts.method,\n                headers: opts.headers,\n            }, (res) => {\n                const chunks: Buffer[] = [];\n                res.on(\"data\", (c) => chunks.push(Buffer.isBuffer(c) ? c : Buffer.from(c)));\n                res.on(\"end\", () => {\n                    const text = Buffer.concat(chunks).toString(\"utf8\");\n                    resolve({ status: res.statusCode || 0, headers: res.headers, text });\n                });\n            });\n            req.setTimeout(opts.timeoutMs, () => {\n                req.destroy(new Error(\"Request timed out\"));\n            });\n            req.on(\"error\", (err) => reject(err));\n            if (opts.body)\n                req.write(opts.body);\n            req.end();\n        });\n    }\n}\n"]}