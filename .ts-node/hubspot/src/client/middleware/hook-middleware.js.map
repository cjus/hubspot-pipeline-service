{"version":3,"file":"hook-middleware.js","sourceRoot":"","sources":["../../../../../app/hubspot/src/client/middleware/hook-middleware.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,8CA6BC;AA7BD,SAAgB,iBAAiB,CAAC,KAAwC,EAAE,MAAc,EAAE,QAAyC;IACjI,IAAM,OAAO,GAAG,UAAC,IAAc,YAAK,OAAA,kBAAI,CAAC,MAAA,KAAK,CAAC,IAAI,CAAC,mCAAI,EAAE,CAAC,QAAE,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,gBAAK,OAAA,CAAC,MAAA,CAAC,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,MAAA,CAAC,CAAC,QAAQ,mCAAI,CAAC,CAAC,CAAA,EAAA,CAAC,CAAA,EAAA,CAAC;IACnH,OAAO;QACG,aAAa;;;;;;kCACyB,EAAxB,KAAA,OAAO,CAAC,eAAe,CAAC;;;iCAAxB,CAAA,cAAwB,CAAA;4BAA7B,CAAC;4BACR,qBAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,EAAA;;4BAA1C,SAA0C,CAAC;;;4BAD/B,IAAwB,CAAA;;;;;;SAE3C;QACK,aAAa,YAAC,IAAmC;;;;;;4BAC7C,GAAG,GAAG,QAAQ,CAAC,eAAe,CAAC,CAAC;4BACtC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;4BACpB,GAAG,CAAC,cAAc,GAAG,UAAC,OAAO;gCACzB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;4BACjC,CAAC,CAAC;kCACsC,EAAxB,KAAA,OAAO,CAAC,eAAe,CAAC;;;iCAAxB,CAAA,cAAwB,CAAA;4BAA7B,CAAC;4BACR,qBAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAA;;4BAApB,SAAoB,CAAC;;;4BADT,IAAwB,CAAA;;;;;;SAE3C;QACK,OAAO,YAAC,GAAY;;;;;;4BAChB,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;4BAChC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC;kCACkB,EAAlB,KAAA,OAAO,CAAC,SAAS,CAAC;;;iCAAlB,CAAA,cAAkB,CAAA;4BAAvB,CAAC;4BACR,qBAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAA;;4BAApB,SAAoB,CAAC;;;4BADT,IAAkB,CAAA;;;;;;SAErC;QACK,OAAO,YAAC,OAAe;;;;;;4BACnB,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;4BAChC,GAAG,CAAC,QAAQ,GAAG,EAAE,OAAO,SAAA,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;kCACZ,EAAlB,KAAA,OAAO,CAAC,SAAS,CAAC;;;iCAAlB,CAAA,cAAkB,CAAA;4BAAvB,CAAC;4BACR,qBAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAA;;4BAApB,SAAoB,CAAC;;;4BADT,IAAkB,CAAA;;;;;;SAErC;KACJ,CAAC;AACN,CAAC","sourcesContent":["import type { Hook, HookContext, HookType } from \"../../types/hooks\";\nimport type { HttpResponseEnvelope } from \"../../types/envelopes\";\nexport function applyHookPipeline(hooks: Partial<Record<HookType, Hook[]>>, opName: string, buildCtx: (type: HookType) => HookContext) {\n    const ordered = (type: HookType) => [...(hooks[type] ?? [])].sort((a, b) => (a.priority ?? 0) - (b.priority ?? 0));\n    return {\n        async beforeRequest(): Promise<void> {\n            for (const h of ordered(\"beforeRequest\"))\n                await h.execute(buildCtx(\"beforeRequest\"));\n        },\n        async afterResponse(resp: HttpResponseEnvelope<unknown>): Promise<void> {\n            const ctx = buildCtx(\"afterResponse\");\n            ctx.response = resp;\n            ctx.modifyResponse = (updates) => {\n                Object.assign(resp, updates);\n            };\n            for (const h of ordered(\"afterResponse\"))\n                await h.execute(ctx);\n        },\n        async onError(err: unknown): Promise<void> {\n            const ctx = buildCtx(\"onError\");\n            ctx.error = err;\n            for (const h of ordered(\"onError\"))\n                await h.execute(ctx);\n        },\n        async onRetry(attempt: number): Promise<void> {\n            const ctx = buildCtx(\"onRetry\");\n            ctx.metadata = { attempt, operation: opName };\n            for (const h of ordered(\"onRetry\"))\n                await h.execute(ctx);\n        },\n    };\n}\n"]}