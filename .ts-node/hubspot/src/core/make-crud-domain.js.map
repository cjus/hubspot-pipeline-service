{"version":3,"file":"make-crud-domain.js","sourceRoot":"","sources":["../../../../app/hubspot/src/core/make-crud-domain.ts"],"names":[],"mappings":"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","sourcesContent":["import { paginateCursor, type SendFn } from \"./paginate\";\n/**\n * makeCrudDomain\n *\n * Role in architecture:\n * - Creates a thin CRUD surface for a HubSpot CRM object path using the shared\n *   paginator and the connector's transport (`send`).\n * - Used by files in `src/domains/*` to bind a concrete API path and model types\n *   without duplicating request/pagination logic.\n *\n * Generics\n * - TObject: item model (e.g., `Contact`, `Company`)\n * - TListResponse: list API contract (e.g., `ContactsResponse`)\n * - TSingleResponse: single API contract (e.g., `ContactResponse`)\n *\n * Parameters\n * - objectPath: HubSpot REST path for the object (e.g., `/crm/v3/objects/contacts`)\n * - send: transport function provided by the connector that applies retries,\n *   rateâ€‘limits, auth, and hooks.\n */\nexport function makeCrudDomain<TObject, TListResponse, TSingleResponse>(objectPath: string, send: SendFn) {\n    const api = {\n        // GET /objects with properties/limit/after\n        list: (params?: {\n            properties?: string[];\n            limit?: number;\n            after?: string;\n        }) => {\n            const query: Record<string, any> = {};\n            if (params?.properties?.length)\n                query.properties = params.properties.join(\",\");\n            if (params?.limit)\n                query.limit = params.limit;\n            if (params?.after)\n                query.after = params.after;\n            return send<TListResponse>({ method: \"GET\", path: objectPath, query });\n        },\n        // GET /objects/{id} with optional properties\n        get: (params: {\n            id: string;\n            properties?: string[];\n        }) => {\n            const query: Record<string, any> = {};\n            if (params?.properties?.length)\n                query.properties = params.properties.join(\",\");\n            return send<TSingleResponse>({ method: \"GET\", path: `${objectPath}/${params.id}` as const, query });\n        },\n        // Async iterator over all items using cursor pagination\n        streamAll: async function* (params?: {\n            properties?: string[];\n            pageSize?: number;\n        }) {\n            const query: Record<string, any> = {};\n            if (params?.properties?.length)\n                query.properties = params.properties.join(\",\");\n            for await (const items of paginateCursor<TObject>({ send, path: objectPath, query, pageSize: params?.pageSize })) {\n                for (const item of items)\n                    yield item;\n            }\n        },\n        // Collect items into an array with an optional max cap\n        getAll: async (params?: {\n            properties?: string[];\n            pageSize?: number;\n            maxItems?: number;\n        }) => {\n            const results: TObject[] = [];\n            for await (const item of api.streamAll({ properties: params?.properties, pageSize: params?.pageSize })) {\n                results.push(item);\n                if (params?.maxItems && results.length >= params.maxItems)\n                    break;\n            }\n            return results;\n        },\n    };\n    return api;\n}\n"]}